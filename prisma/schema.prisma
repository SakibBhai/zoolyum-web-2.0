// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  projects      Project[]
  blogPosts     BlogPost[]
  campaigns     Campaign[]
}

enum Role {
  USER
  ADMIN
}

model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  content     String?
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  imageUrl    String?
  galleryUrls String[]
  category    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  imageUrl    String?
  category    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model Service {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  content     String?
  imageUrl    String?
  icon        String?
  featured    Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String?
  bio         String?
  imageUrl    String?
  linkedinUrl String?
  twitterUrl  String?
  email       String?
  status      String   @default("draft")
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  position  String?
  company   String?
  content   String
  rating    Int?
  imageUrl  String?
  featured  Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  shortDescription String?
  content         String?
  startDate       DateTime?
  endDate         DateTime?
  status          CampaignStatus   @default(DRAFT)
  imageUrls       String[]
  videoUrls       String[]
  enableForm      Boolean          @default(false)
  formFields      Json?            // Store form configuration as JSON
  successMessage  String?
  redirectUrl     String?
  views           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  author          User             @relation(fields: [authorId], references: [id])
  authorId        String
  ctas            CampaignCTA[]
  submissions     CampaignSubmission[]
}

model CampaignCTA {
  id         String   @id @default(cuid())
  label      String
  url        String
  order      Int      @default(0)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CampaignSubmission {
  id         String   @id @default(cuid())
  data       Json     // Store form submission data as JSON
  ipAddress  String?
  userAgent  String?
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  createdAt  DateTime @default(now())
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  status    String   @default("new") // new, read, replied, archived
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactSettings {
  id                String   @id @default(cuid())
  // Contact Information
  email             String?
  phone             String?
  address           String?
  workingHours      String?
  
  // Social Media
  twitterUrl        String?
  linkedinUrl       String?
  instagramUrl      String?
  behanceUrl        String?
  
  // Form Settings
  enablePhoneField  Boolean  @default(true)
  requirePhoneField Boolean  @default(false)
  autoReplyEnabled  Boolean  @default(false)
  autoReplyMessage  String?
  
  // Notification Settings
  notificationEmail String?
  emailNotifications Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FooterSettings {
  id                    String   @id @default(cuid())
  // Footer Content
  footerContent         String?  // Rich text content
  copyright             String?
  disclaimer            String?
  aboutTagline          String?
  
  // Quick Links
  quickLinks            Json?    // Array of {label, url, openInNewTab}
  
  // Social Media
  showSocialMedia       Boolean  @default(true)
  facebookUrl           String?
  instagramUrl          String?
  linkedinUrl           String?
  youtubeUrl            String?
  twitterUrl            String?
  whatsappUrl           String?
  customSocialIcon      String?  // Custom icon URL
  customSocialUrl       String?
  
  // Footer Logo
  showLogo              Boolean  @default(true)
  logoUrl               String?
  
  // Language Selector
  showLanguageSelector  Boolean  @default(false)
  supportedLanguages    String[] // Array of language codes
  
  // Newsletter
  showNewsletter        Boolean  @default(false)
  newsletterPlaceholder String?
  mailServiceConfig     Json?    // Mail service integration config
  
  // Styling
  backgroundColor       String?  @default("#1A1A1A")
  textColor             String?  @default("#E9E7E2")
  columnLayout          Int      @default(3) // 1-4 columns
  customCSS             String?
  
  // Legal Links
  showLegalLinks        Boolean  @default(true)
  privacyPolicyUrl      String?
  termsConditionsUrl    String?
  cookiePolicyUrl       String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("footer_settings")
}
