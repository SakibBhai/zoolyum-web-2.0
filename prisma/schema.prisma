generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("ADMIN")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admin_users")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String
  imageUrl  String?  @map("image_url")
  published Boolean  @default(false)
  tags      String[]
  authorId  String?  @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([slug])
  @@index([published])
  @@index([createdAt])
  @@map("blog_posts")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ipAddress String?  @map("ip_address")
  subject   String?
  userAgent String?  @map("user_agent")

  @@index([createdAt(sort: Desc)], map: "idx_contacts_created_at")
  @@index([email], map: "idx_contacts_email")
  @@index([status], map: "idx_contacts_status")
  @@map("contacts")
}

model ContactSettings {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String    @db.VarChar(255)
  phone              String    @db.VarChar(50)
  address            String
  workingHours       String    @map("working_hours") @db.VarChar(255)
  twitterUrl         String?   @map("twitter_url") @db.VarChar(255)
  linkedinUrl        String?   @map("linkedin_url") @db.VarChar(255)
  instagramUrl       String?   @map("instagram_url") @db.VarChar(255)
  behanceUrl         String?   @map("behance_url") @db.VarChar(255)
  enablePhoneField   Boolean   @default(true) @map("enable_phone_field")
  requirePhoneField  Boolean   @default(false) @map("require_phone_field")
  autoReplyEnabled   Boolean   @default(false) @map("auto_reply_enabled")
  autoReplyMessage   String?   @map("auto_reply_message")
  notificationEmail  String?   @map("notification_email") @db.VarChar(255)
  emailNotifications Boolean   @default(true) @map("email_notifications")
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("contact_settings")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  company   String?
  position  String?
  content   String
  rating    Int      @default(5)
  imageUrl  String?  @map("image_url")
  featured  Boolean  @default(false)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("testimonials")
}

model TeamMember {
  id                                                          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                        String               @db.VarChar(255)
  email                                                       String               @unique @db.VarChar(255)
  role                                                        String               @db.VarChar(255)
  department                                                  String               @db.VarChar(255)
  phone                                                       String?              @db.VarChar(50)
  bio                                                         String?              @default("")
  skills                                                      Json?                @default("[]")
  avatar                                                      String?              @default("/placeholder-user.jpg") @db.VarChar(500)
  employee_id                                                 String               @unique @db.VarChar(50)
  is_active                                                   Boolean?             @default(true)
  createdAt                                                   DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                   DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  location                                                    String?              @default("") @db.VarChar(255)
  linkedin                                                    String?              @db.VarChar(500)
  twitter                                                     String?              @db.VarChar(100)
  salary                                                      Decimal?             @db.Decimal(10, 2)
  manager                                                     String?              @db.VarChar(255)
  performance_rating                                          Decimal?             @db.Decimal(3, 2)
  emergency_contact_name                                      String?              @db.VarChar(255)
  emergency_contact_relationship                              String?              @db.VarChar(100)
  emergency_contact_phone                                     String?              @db.VarChar(50)
  emergency_contact_email                                     String?              @db.VarChar(255)
  join_date                                                   DateTime?            @default(dbgenerated("CURRENT_DATE")) @db.Date
  content_calendar_content_calendar_approved_byToteam_members content_calendar[]   @relation("content_calendar_approved_byToteam_members")
  content_calendar_content_calendar_assigned_toToteam_members content_calendar[]   @relation("content_calendar_assigned_toToteam_members")
  invoices                                                    invoices[]
  projects                                                    Project[]
  recurring_invoices                                          recurring_invoices[]
  reports                                                     reports[]
  tasks                                                       tasks[]
  transactions                                                transactions[]

  @@map("team_members")
}

model Campaign {
  id               String               @id @default(cuid())
  title            String
  slug             String               @unique
  shortDescription String?
  content          String?
  startDate        DateTime?            @map("start_date")
  endDate          DateTime?            @map("end_date")
  status           String               @default("DRAFT")
  imageUrls        String[]             @map("image_urls")
  videoUrls        String[]             @map("video_urls")
  enableForm       Boolean              @default(false) @map("enable_form")
  successMessage   String?              @map("success_message")
  redirectUrl      String?              @map("redirect_url")
  ctas             Json?                @map("ctas")
  formFields       Json?                @map("form_fields")
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  submissions      CampaignSubmission[]

  @@map("campaigns")
}

model CampaignSubmission {
  id          String   @id @default(cuid())
  campaignId  String   @map("campaign_id")
  data        Json
  submittedAt DateTime @default(now()) @map("submitted_at")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([submittedAt])
  @@map("campaign_submissions")
}

model Project {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @db.VarChar(255)
  description           String?
  client_id             String?                 @db.Uuid
  status                String?                 @default("planning") @db.VarChar(50)
  priority              String?                 @default("medium") @db.VarChar(20)
  type                  String?                 @default("General") @db.VarChar(100)
  start_date            DateTime?               @db.Date
  end_date              DateTime?               @db.Date
  budget                Decimal?                @default(0) @db.Decimal(12, 2)
  estimated_budget      Decimal?                @default(0) @db.Decimal(12, 2)
  actual_budget         Decimal?                @default(0) @db.Decimal(12, 2)
  progress              Int?                    @default(0)
  manager               String?                 @db.VarChar(255)
  created_by            String?                 @db.Uuid
  tasks_total           Int?                    @default(0)
  tasks_completed       Int?                    @default(0)
  createdAt             DateTime?               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  content_calendar      content_calendar[]
  enhanced_transactions enhanced_transactions[]
  invoices              invoices[]
  project_activities    project_activities[]
  clients               clients?                @relation(fields: [client_id], references: [id], onUpdate: NoAction)
  team_members          TeamMember?             @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  recurring_invoices    recurring_invoices[]
  tasks                 tasks[]
  transactions          transactions[]

  @@index([client_id], map: "idx_projects_client_id")
  @@map("projects")
}

model activities {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lead_id     String   @db.Uuid
  type        String
  subject     String
  description String?
  date        DateTime @db.Timestamptz(6)
  duration    Int?
  outcome     String?
  next_action String?
  created_by  String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  leads       leads    @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@index([date], map: "idx_activities_date")
  @@index([lead_id], map: "idx_activities_lead_id")
  @@index([type], map: "idx_activities_type")
}

model clients {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String                  @db.VarChar(255)
  industry              String?                 @db.VarChar(255)
  contact_name          String?                 @db.VarChar(255)
  email                 String?                 @db.VarChar(255)
  phone                 String?                 @db.VarChar(20)
  address               String?
  website               String?                 @db.VarChar(255)
  status                String?                 @default("active") @db.VarChar(50)
  contract_value        Decimal?                @default(0) @db.Decimal(12, 2)
  notes                 String?
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?               @default(now()) @db.Timestamptz(6)
  content_calendar      content_calendar[]
  enhanced_transactions enhanced_transactions[]
  invoices              invoices[]
  projects              Project[]
  recurring_invoices    recurring_invoices[]
  transactions          transactions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model content_calendar {
  id                                                      String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                                                   String      @db.VarChar(255)
  description                                             String?
  content_type                                            String      @db.VarChar(100)
  platform                                                String      @db.VarChar(100)
  scheduled_date                                          DateTime    @db.Date
  scheduled_time                                          DateTime?   @db.Time(6)
  project_id                                              String?     @db.Uuid
  client_id                                               String?     @db.Uuid
  assigned_to                                             String?     @db.Uuid
  status                                                  String?     @default("draft") @db.VarChar(50)
  tags                                                    String[]
  media_urls                                              String[]
  approval_required                                       Boolean?    @default(false)
  approved_by                                             String?     @db.Uuid
  approved_at                                             DateTime?   @db.Timestamptz(6)
  published_at                                            DateTime?   @db.Timestamptz(6)
  engagement_metrics                                      Json?       @default("{}")
  notes                                                   String?
  created_at                                              DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                                              DateTime?   @default(now()) @db.Timestamptz(6)
  team_members_content_calendar_approved_byToteam_members TeamMember? @relation("content_calendar_approved_byToteam_members", fields: [approved_by], references: [id], onUpdate: NoAction)
  team_members_content_calendar_assigned_toToteam_members TeamMember? @relation("content_calendar_assigned_toToteam_members", fields: [assigned_to], references: [id], onUpdate: NoAction)
  clients                                                 clients?    @relation(fields: [client_id], references: [id], onUpdate: NoAction)
  projects                                                Project?    @relation(fields: [project_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model enhanced_transactions {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String    @db.VarChar(50)
  sub_type          String?   @db.VarChar(100)
  amount            Decimal   @db.Decimal(15, 2)
  currency          String?   @default("BDT") @db.VarChar(10)
  exchange_rate     Decimal?  @db.Decimal(10, 4)
  original_amount   Decimal?  @db.Decimal(15, 2)
  original_currency String?   @db.VarChar(10)
  category          String    @db.VarChar(100)
  custom_category   String?   @db.VarChar(100)
  description       String
  rich_description  String?
  transaction_date  DateTime  @db.Date
  due_date          DateTime? @db.Date
  payment_method    String    @db.VarChar(100)
  vendor_client     String?   @db.VarChar(200)
  attachments       Json?     @default("[]")
  is_recurring      Boolean?  @default(false)
  recurring_pattern Json?
  is_confidential   Boolean?  @default(false)
  tags              Json?     @default("[]")
  project_id        String?   @db.Uuid
  client_id         String?   @db.Uuid
  invoice_id        String?   @db.Uuid
  status            String?   @default("completed") @db.VarChar(50)
  created_by        String?   @db.Uuid
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  clients           clients?  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects          Project?  @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category], map: "idx_enhanced_transactions_category")
  @@index([transaction_date], map: "idx_enhanced_transactions_date")
  @@index([is_recurring], map: "idx_enhanced_transactions_recurring")
  @@index([type], map: "idx_enhanced_transactions_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model finance_view_preferences {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?   @db.Uuid
  preferred_view String?   @default("standard") @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
}

model invoices {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_number  String         @unique @db.VarChar(100)
  client_id       String?        @db.Uuid
  project_id      String?        @db.Uuid
  amount          Decimal        @db.Decimal(12, 2)
  tax_amount      Decimal?       @default(0) @db.Decimal(12, 2)
  total_amount    Decimal        @db.Decimal(12, 2)
  status          String?        @default("draft") @db.VarChar(50)
  issue_date      DateTime       @db.Date
  due_date        DateTime       @db.Date
  paid_date       DateTime?      @db.Date
  notes           String?
  items           Json?
  payment_terms   Int?           @default(30)
  late_fees       Decimal?       @default(0) @db.Decimal(12, 2)
  discount_amount Decimal?       @default(0) @db.Decimal(12, 2)
  currency        String?        @default("USD") @db.VarChar(10)
  created_by      String?        @db.Uuid
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  clients         clients?       @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team_members    TeamMember?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects        Project?       @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions    transactions[]
}

model leads {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name        String
  last_name         String
  email             String
  phone             String?
  company           String?
  position          String?
  source            String
  status            String       @default("new")
  assigned_to       String?
  value             Decimal      @default(0) @db.Decimal(10, 2)
  notes             String?
  tags              Json         @default("[]")
  location          String?
  industry          String?
  lead_score        Int          @default(0)
  last_contact_date DateTime?    @db.Timestamptz(6)
  next_follow_up    DateTime?    @db.Timestamptz(6)
  created_at        DateTime     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime     @default(now()) @db.Timestamptz(6)
  activities        activities[]

  @@index([assigned_to], map: "idx_leads_assigned_to")
  @@index([created_at], map: "idx_leads_created_at")
  @@index([source], map: "idx_leads_source")
  @@index([status], map: "idx_leads_status")
}

model project_activities {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String    @db.Uuid
  type        String    @db.VarChar(50)
  description String
  user_id     String?   @db.Uuid
  user_name   String?   @db.VarChar(255)
  timestamp   DateTime? @default(now()) @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  projects    Project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([project_id], map: "idx_project_activities_project_id")
  @@index([timestamp(sort: Desc)], map: "idx_project_activities_timestamp")
}

model project_version_history {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id      String   @db.Uuid
  changed_fields  Json
  previous_values Json
  changed_by      String
  timestamp       DateTime @default(now()) @db.Timestamptz(6)
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  @@index([project_id], map: "idx_project_version_history_project_id")
}

model recurring_invoices {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id         String?     @db.Uuid
  project_id        String?     @db.Uuid
  template_name     String      @db.VarChar(255)
  amount            Decimal     @db.Decimal(12, 2)
  frequency         String      @db.VarChar(50)
  start_date        DateTime    @db.Date
  end_date          DateTime?   @db.Date
  next_invoice_date DateTime    @db.Date
  status            String?     @default("active") @db.VarChar(50)
  items             Json?
  payment_terms     Int?        @default(30)
  auto_send         Boolean?    @default(false)
  created_by        String?     @db.Uuid
  created_at        DateTime?   @default(now()) @db.Timestamp(6)
  updated_at        DateTime?   @default(now()) @db.Timestamp(6)
  clients           clients?    @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team_members      TeamMember? @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects          Project?    @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reports {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String      @db.VarChar(255)
  type               String?     @db.VarChar(100)
  modules            String[]
  filters            Json?       @default("{}")
  date_range         Json?       @default("{}")
  group_by           String?     @db.VarChar(100)
  metrics            String[]
  data               Json?       @default("{}")
  format             String?     @default("json") @db.VarChar(20)
  created_by         String?     @db.Uuid
  is_scheduled       Boolean?    @default(false)
  schedule_frequency String?     @db.VarChar(50)
  last_generated     DateTime?   @db.Timestamptz(6)
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?   @default(now()) @db.Timestamptz(6)
  team_members       TeamMember? @relation(fields: [created_by], references: [id], onUpdate: NoAction)
}

model tasks {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String      @db.VarChar(255)
  description        String?
  project_id         String?     @db.Uuid
  assigned_to        String?     @db.Uuid
  priority           String      @default("medium") @db.VarChar(10)
  status             String      @default("todo") @db.VarChar(20)
  due_date           DateTime?   @db.Timestamptz(6)
  estimated_hours    Decimal?    @db.Decimal(5, 2)
  actual_hours       Decimal?    @db.Decimal(5, 2)
  is_content_related Boolean?    @default(false)
  dependencies       Json?       @default("[]")
  completed_at       DateTime?   @db.Timestamptz(6)
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?   @default(now()) @db.Timestamptz(6)
  team_members       TeamMember? @relation(fields: [assigned_to], references: [id], onUpdate: NoAction)
  projects           Project?    @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([project_id], map: "idx_tasks_project_id")
}

model transactions {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type             String      @db.VarChar(50)
  amount           Decimal     @db.Decimal(12, 2)
  description      String?
  category         String?     @db.VarChar(100)
  project_id       String?     @db.Uuid
  client_id        String?     @db.Uuid
  invoice_id       String?     @db.Uuid
  transaction_date DateTime    @db.Date
  status           String?     @default("completed") @db.VarChar(50)
  payment_method   String?     @db.VarChar(100)
  reference_number String?     @db.VarChar(255)
  notes            String?
  created_by       String?     @db.Uuid
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  updated_at       DateTime?   @default(now()) @db.Timestamp(6)
  clients          clients?    @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team_members     TeamMember? @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoices         invoices?   @relation(fields: [invoice_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects         Project?    @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Job {
  id               String           @id @default(cuid())
  title            String           @db.VarChar(255)
  slug             String           @unique @db.VarChar(255)
  department       String           @db.VarChar(100)
  location         String           @db.VarChar(100)
  jobType          String           @map("job_type") @db.VarChar(50) // Full-time, Part-time, Contract, Internship
  employmentType   String           @map("employment_type") @db.VarChar(50) // Remote, On-site, Hybrid
  salaryMin        Decimal?         @map("salary_min") @db.Decimal(12, 2)
  salaryMax        Decimal?         @map("salary_max") @db.Decimal(12, 2)
  salaryCurrency   String?          @map("salary_currency") @default("USD") @db.VarChar(10)
  description      String           @db.Text
  requirements     String           @db.Text
  responsibilities String           @db.Text
  perks            String?          @db.Text
  skills           String[]         // Required skills as array
  experience       String?          @db.VarChar(100) // e.g., "2-4 years", "Entry level"
  published        Boolean          @default(false)
  featured         Boolean          @default(false)
  applicationDeadline DateTime?     @map("application_deadline") @db.Date
  createdBy        String?          @map("created_by")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  applications     JobApplication[]

  @@index([published])
  @@index([department])
  @@index([jobType])
  @@index([location])
  @@index([createdAt])
  @@map("jobs")
}

model JobApplication {
  id              String   @id @default(cuid())
  jobId           String   @map("job_id")
  firstName       String   @map("first_name") @db.VarChar(100)
  lastName        String   @map("last_name") @db.VarChar(100)
  email           String   @db.VarChar(255)
  phone           String?  @db.VarChar(50)
  coverLetter     String?  @map("cover_letter") @db.Text
  resumeUrl       String?  @map("resume_url") @db.VarChar(500)
  portfolioUrl    String?  @map("portfolio_url") @db.VarChar(500)
  linkedinUrl     String?  @map("linkedin_url") @db.VarChar(500)
  experience      String?  @db.Text
  availability    String?  @db.VarChar(100)
  salaryExpectation Decimal? @map("salary_expectation") @db.Decimal(12, 2)
  status          String   @default("PENDING") @db.VarChar(50) // PENDING, REVIEWED, SHORTLISTED, REJECTED, HIRED
  notes           String?  @db.Text
  reviewedBy      String?  @map("reviewed_by")
  reviewedAt      DateTime? @map("reviewed_at")
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  job             Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
  @@index([email])
  @@index([createdAt])
  @@map("job_applications")
}
